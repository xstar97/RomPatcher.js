name: Create and publish a Docker image

on:
  workflow_dispatch:
    inputs:
      manual_trigger:
        description: 'Manually trigger the update check'
        required: false
      custom_upstream_tag:
        description: 'Custom UPSTREAM_TAG (optional)'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL_API: https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if Docker image tag already exists
        id: check-tag-exists
        run: |
          TAG_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://ghcr.io/v2/${{ env.IMAGE_NAME }}/manifests/${{ env.UPSTREAM_TAG }}")
          echo "::set-output name=tag_exists::${TAG_EXISTS}"
        continue-on-error: true

      - name: Set UPSTREAM_TAG
        if: steps.check-tag-exists.outputs.tag_exists != '200' || github.event.inputs.manual_trigger
        run: |
          if [[ -n "${{ github.event.inputs.custom_upstream_tag }}" ]]; then
            UPSTREAM_TAG="${{ github.event.inputs.custom_upstream_tag }}"
          else
            latest_tag=$(curl -s ${REPO_URL_API} | jq -r '.tag_name')
            if [[ -n "$latest_tag" ]]; then
              echo "::set-output name=upstream_tag::$latest_tag"
              UPSTREAM_TAG="$latest_tag"
            else
              echo "No new tag found."
            fi
          fi
          if [[ -n "${{ steps.check-tag-exists.outputs.tag_exists }}" ]]; then
            echo "UPSTREAM_TAG=${{ steps.check-tag-exists.outputs.tag_exists }}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image (if tag doesn't exist)
        if: steps.check-tag-exists.outputs.tag_exists != '200'
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.UPSTREAM_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
